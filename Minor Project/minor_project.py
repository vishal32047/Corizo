# -*- coding: utf-8 -*-
"""minor_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/117JW2ElGbMHkh8BTHupj5NhM4goxio-i
"""

from google.colab import drive
drive.mount('/content/drive')

#libraries
import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

# df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Stock_Price_Prediction/Data.csv')

df = web.DataReader('AAPL', data_source='stooq', start='2012-01-01', end='2019-12-17')
df

df.sort_values(by=['Date'], inplace=True)
print(df)

plt.figure(figsize = (16,8))
plt.title('Close Price History')
plt.plot(df['Close'])
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close price USD ($)', fontsize=18)
plt.show()

data = df.filter(['Close'])
dataset = data.values

training_data_len = math.ceil(len(dataset)*.8)

training_data_len

#Scale the data

scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)
scaled_data

#Create the training data
#Create the scaled training data set

train_data = scaled_data[0:training_data_len]

#split the into x_train and y_train data set
x_train = []
y_train = []

for i in range(60,len(train_data)):
  x_train.append(train_data[i-60:i,0])
  y_train.append(train_data[i,0])
  if i<=60:
    print(x_train)
    print(y_train)
    print()

#Convert the x_train and y_train in to numpy array

x_train,y_train = np.array(x_train),np.array(y_train)

#Reshape the data

x_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))
x_train.shape

#Build the lstm model

model = Sequential()
model.add(LSTM(50,return_sequences=True, input_shape=(x_train.shape[1],1)))
model.add(LSTM(50,return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

#Compile model
model.compile(optimizer='adam',loss='mean_squared_error')

#Train the model
model.fit(x_train,y_train,batch_size=1,epochs=1)

#Create the testing data set
#Create a new array containing scaled values from index 1543 to 2003

test_data = scaled_data[training_data_len - 60:,:]
#Create the data sets x_test and y_test
x_test = []
y_test = dataset[training_data_len:, :]

for i in range(60,len(test_data)):
  x_test.append(test_data[i-60:i,0])

#Convert the data to a numpy array
x_test = np.array(x_test)

x_test = np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))

#get the models predicted price values

predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

#Get rmse
rmse = np.sqrt( np.mean( predictions - y_test)**2)
rmse

#plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions
#Visualize the data
plt.figure(figsize = (16,8))
plt.title('Model')
plt.xlabel('Date',fontsize=18)
plt.ylabel('Close Price USD ($)',fontsize = 18)
plt.plot(train['Close'])
plt.plot(valid[['Close','Predictions']])
plt.legend(['Train','Val','Predictions'], loc = 'lower right')
plt.show()

valid

apple_quote = web.DataReader('AAPL', data_source='stooq', start='2012-01-01', end='2019-12-17')
apple_quote.sort_values(by=['Date'], inplace=True)

new_df = apple_quote.filter(['Close'])

last_60_days = new_df[-60:].values

last_60_days_scaled = scaler.transform(last_60_days)

X_test = []

X_test.append(last_60_days_scaled)

X_test = np.array(X_test)
X_test = np.reshape(X_test,(X_test.shape[0], X_test.shape[1],1))

pred_price = model.predict(X_test)

pred_price = scaler.inverse_transform(pred_price)
print(pred_price)

apple_quote2 = web.DataReader('AAPL', data_source='stooq', start='2019-12-18', end='2019-12-18')
print(apple_quote2['Close'])